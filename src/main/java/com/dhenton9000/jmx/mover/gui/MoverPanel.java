/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dhenton9000.jmx.mover.gui;

import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author dhenton
 */
public class MoverPanel extends javax.swing.JPanel implements ListSelectionListener {

    private JmxMover moverParent = null;
    private final Logger logger = LoggerFactory.getLogger(MoverPanel.class);
    private static final String LIST_IDENTIFIER = "identifier";
    private String selectedFromQueue = null;
    private String selectedToQueue = null;

    public static enum QUEUE_LIST {

        TO_LIST, FROM_LIST
    }

    /**
     * Creates new form MoverPanel
     */
    public MoverPanel() {
        initComponents();
        setVisible(true);

        moveFromQueueList.addListSelectionListener(this);
        moveToQueueList.addListSelectionListener(this);


    }

    public void clear() {
        setSelectedFromQueue(null);
        setSelectedToQueue(null);
        DefaultListModel itemModel = new DefaultListModel();
        moveFromQueueList.setModel(itemModel);
        itemModel = new DefaultListModel();
        moveToQueueList.setModel(itemModel);
        this.invalidate();
    }

    public void loadMoverLists(List<String> items) {
        Collections.sort(items);
        setSelectedFromQueue(null);
        setSelectedToQueue(null);
        DefaultListModel itemModel1 = new DefaultListModel();
        int i = 0;
        for (String x : items) {
            itemModel1.add(i, x);
            i++;
        }
        moveFromQueueList.setModel(itemModel1);
        DefaultListModel itemModel2 = new DefaultListModel();
        i = 0;
        for (String x : items) {
            itemModel2.add(i, x);
            i++;
        }
        moveToQueueList.setModel(itemModel2);
        this.invalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fromScrollPane = new javax.swing.JScrollPane();
        moveFromQueueList = new javax.swing.JList();
        toScrollPane = new javax.swing.JScrollPane();
        moveToQueueList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnMoveMessages = new javax.swing.JButton();
        lblFromQueueCount = new javax.swing.JLabel();
        lblToQueueCount = new javax.swing.JLabel();

        moveFromQueueList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fromScrollPane.setViewportView(moveFromQueueList);
        moveFromQueueList.putClientProperty(LIST_IDENTIFIER, QUEUE_LIST.FROM_LIST);
        moveToQueueList.putClientProperty(LIST_IDENTIFIER, QUEUE_LIST.TO_LIST);

        moveToQueueList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toScrollPane.setViewportView(moveToQueueList);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Move From Queue:");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Move To Queue:");

        jLabel4.setText("Select a Queue to move from and then a queue to move to");

        btnMoveMessages.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnMoveMessages.setText("Move Messages");
        btnMoveMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveMessagesActionPerformed(evt);
            }
        });

        lblFromQueueCount.setText("lblFromQueueCount");

        lblToQueueCount.setText("lblToQueueCount");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 130, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFromQueueCount)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblToQueueCount))
                    .addComponent(toScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMoveMessages)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(lblFromQueueCount)
                        .addComponent(lblToQueueCount)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(fromScrollPane))
                .addGap(18, 18, 18)
                .addComponent(btnMoveMessages)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnMoveMessages.setVisible(false);
        lblFromQueueCount.setVisible(false);
        lblToQueueCount.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMoveMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveMessagesActionPerformed

        String info = "Confirm moving messages\nFrom: " + getSelectedFromQueue()
                + "\nTo: " + getSelectedToQueue();
        int result =
                JOptionPane.showConfirmDialog(this, info, "Please Confirm", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.OK_OPTION) {

            this.getMoverParent().moveMessages(this.getSelectedFromQueue(), this.getSelectedToQueue());







        }// end hit okay

    }//GEN-LAST:event_btnMoveMessagesActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMoveMessages;
    private javax.swing.JScrollPane fromScrollPane;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblFromQueueCount;
    private javax.swing.JLabel lblToQueueCount;
    private javax.swing.JList moveFromQueueList;
    private javax.swing.JList moveToQueueList;
    private javax.swing.JScrollPane toScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the moverParent
     */
    public JmxMover getMoverParent() {
        return moverParent;
    }

    /**
     * @param moverParent the moverParent to set
     */
    public void setMoverParent(JmxMover moverParent) {
        this.moverParent = moverParent;
    }

    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            // logger.debug("valueChanged " + e.toString());
            JList sourceList = (JList) e.getSource();
            Long count = 0L;
            QUEUE_LIST listSource = (QUEUE_LIST) sourceList.getClientProperty(LIST_IDENTIFIER);
            String selectedValue = (String) sourceList.getSelectedValue();
            if (listSource.equals(QUEUE_LIST.TO_LIST)) {
                setSelectedToQueue(selectedValue);
                count = getMoverParent().getQueueCount(selectedValue);


            }
            if (listSource.equals(QUEUE_LIST.FROM_LIST)) {
                setSelectedFromQueue(selectedValue);
                count = getMoverParent().getQueueCount(selectedValue);
            }
            logger.debug("list source " + listSource + " -- " + selectedValue);
            setDisplayCount(count, listSource);
            if (getSelectedToQueue() != null && getSelectedFromQueue() != null) {

                if (getSelectedToQueue().equals(getSelectedFromQueue())) {
                    // this can't be allowed
                    this.moveFromQueueList.clearSelection();
                    this.moveToQueueList.clearSelection();
                    JOptionPane.showMessageDialog(this,
                            "Source and Destination queues cannot be the same!",
                            "Move Messages Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                btnMoveMessages.setVisible(true);
            } else {
                btnMoveMessages.setVisible(false);
            }

        }
    }

    /**
     * @return the selectedFromQueue
     */
    public String getSelectedFromQueue() {
        return selectedFromQueue;
    }

    /**
     * @param selectedFromQueue the selectedFromQueue to set
     */
    public void setSelectedFromQueue(String selectedFromQueue) {
        this.selectedFromQueue = selectedFromQueue;
    }

    /**
     * @return the selectedToQueue
     */
    public String getSelectedToQueue() {
        return selectedToQueue;
    }

    /**
     * @param selectedToQueue the selectedToQueue to set
     */
    public void setSelectedToQueue(String selectedToQueue) {
        this.selectedToQueue = selectedToQueue;
    }

    /**
     * set the queueCount displays
     *
     * @param count
     * @param listSource
     */
    private void setDisplayCount(Long count, QUEUE_LIST listSource) {

        switch (listSource) {
            case TO_LIST:
                if (count != null) {
                    this.lblToQueueCount.setText("Queue Count: (" + count + ")");
                    this.lblToQueueCount.setVisible(true);
                } else {
                    this.lblToQueueCount.setVisible(false);
                }
                break;
            case FROM_LIST:
                if (count != null) {
                    this.lblFromQueueCount.setText("Queue Count: (" + count + ")");
                    this.lblFromQueueCount.setVisible(true);
                } else {
                    this.lblFromQueueCount.setVisible(false);
                }
                break;
        }
    }
}
