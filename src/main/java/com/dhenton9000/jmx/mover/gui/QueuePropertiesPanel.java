/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dhenton9000.jmx.mover.gui;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author dhenton
 */
public class QueuePropertiesPanel extends javax.swing.JPanel implements ListSelectionListener {

    private JmxMover moverParent = null;
    private final Logger logger = LoggerFactory.getLogger(QueuePropertiesPanel.class);
    private String selectedQueue = null;

    /**
     * Creates new form QueuePropertiesPanel
     */
    public QueuePropertiesPanel() {
        initComponents();
        queueList.addListSelectionListener(this);
    }

    
    public void clear() {
        logger.debug("CLEAR called");
        setSelectedQueue(null);
        DefaultListModel itemModel = new DefaultListModel();
        queueList.setModel(itemModel);
        btnRefreshProperties.setVisible(false);
        queuePropertiesTable.setModel(new DefaultTableModel());
        
        this.invalidate();
    }
    
    public void loadMoverLists(List<String> items) {
        Collections.sort(items);
        setSelectedQueue(null);

        DefaultListModel itemModel = new DefaultListModel();
        int i = 0;
        for (String x : items) {
            itemModel.add(i, x);
            i++;
        }


        queueList.setModel(itemModel);

        this.invalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertiesScrollPane = new javax.swing.JScrollPane();
        queueList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queuePropertiesTable = new javax.swing.JTable();
        btnRefreshProperties = new javax.swing.JButton();

        queueList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        propertiesScrollPane.setViewportView(queueList);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Select a Queue:");

        queuePropertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(queuePropertiesTable);
        queuePropertiesTable.setVisible(false);

        btnRefreshProperties.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnRefreshProperties.setText("Refresh Properties");
        btnRefreshProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshPropertiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE)
                    .addComponent(propertiesScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefreshProperties)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshProperties)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        btnRefreshProperties.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshPropertiesActionPerformed
         if (getSelectedQueue() != null) {
            setTableModel(getSelectedQueue());
            this.invalidate();
        }
    }//GEN-LAST:event_btnRefreshPropertiesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefreshProperties;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane propertiesScrollPane;
    private javax.swing.JList queueList;
    private javax.swing.JTable queuePropertiesTable;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the moverParent
     */
    public JmxMover getMoverParent() {
        return moverParent;
    }

    /**
     * @param moverParent the moverParent to set
     */
    public void setMoverParent(JmxMover moverParent) {
        this.moverParent = moverParent;
    }

    /**
     * @return the selectedQueue
     */
    public String getSelectedQueue() {
        return selectedQueue;
    }

    /**
     * @param selectedQueue the selectedQueue to set
     */
    private void setSelectedQueue(String selectedQueue) {
        this.selectedQueue = selectedQueue;
    }

    /**
     * for handling the list selection event
     *
     * @param e
     */
    public void valueChanged(ListSelectionEvent e) {

        if (!e.getValueIsAdjusting()) {

            JList sourceList = (JList) e.getSource();
            String selectedValue = (String) sourceList.getSelectedValue();
            setSelectedQueue(selectedValue);
            setTableModel(selectedValue);
            btnRefreshProperties.setVisible(true);


        }
    }

    private void setTableModel(String selectedValue) {
        HashMap<String, String> props = getMoverParent().getQueueProperties(selectedValue);
        if (props == null) {
            return;
        }
        DefaultTableModel tModel = new DefaultTableModel();
        this.queuePropertiesTable.setAutoCreateColumnsFromModel(true);
        for (String key : props.keySet()) {
            String val = props.get(key);
            tModel.addColumn(key, new String[]{val});
        }

        this.queuePropertiesTable.setModel(tModel);
        this.queuePropertiesTable.setVisible(true);
    }
}
