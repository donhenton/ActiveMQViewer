/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dhenton9000.jmx.mover.gui;

import com.dhenton9000.jmx.service.JmxBrokerService;
import com.dhenton9000.jmx.service.JmxBrokerServiceImpl;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author dhenton
 */
public class JmxMover extends javax.swing.JFrame {

    private static JmxMover jmxMover;

    /**
     * @return the jMover
     */
    public static JmxMover getJmxMover() {
        return jmxMover;
    }
    /**
     * @return the jMover
     */
    private JmxBrokerService jmxService = new JmxBrokerServiceImpl();
    private final Logger logger = LoggerFactory.getLogger(JmxMover.class);

    /**
     * Creates new form JmxMover
     */
    public JmxMover() {
        initComponents();
        toggleConnect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                final JToggleButton jButton = (JToggleButton) actionEvent.getSource();

                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        handleConnectionToggleButton(jButton);

                    }
                });


            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionTabbedPane = new javax.swing.JTabbedPane();
        moverPanel = new com.dhenton9000.jmx.mover.gui.MoverPanel();
        queuePropertiesPanel = new com.dhenton9000.jmx.mover.gui.QueuePropertiesPanel();
        messagePropertiesPanel = new com.dhenton9000.jmx.mover.gui.MessagePropertiesPanel();
        serverInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtServerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBrokerName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblConnected = new javax.swing.JLabel();
        toggleConnect = new javax.swing.JToggleButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        actionTabbedPane.addTab("Move Queues", moverPanel);
        moverPanel.setMoverParent(this);

        actionTabbedPane.addTab("Queue Properties", queuePropertiesPanel);
        queuePropertiesPanel.setMoverParent(this);

        actionTabbedPane.addTab("Message Properties", messagePropertiesPanel);
        messagePropertiesPanel.setMoverParent(this);

        jLabel1.setText("Server Name:");

        jLabel2.setText("Broker Name:");

        jLabel3.setText("(from the server conf/activemq.xml jmx entry)");

        jLabel4.setText("Jmx Port:");

        toggleConnect.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        toggleConnect.setText("Connect");

        javax.swing.GroupLayout serverInfoPanelLayout = new javax.swing.GroupLayout(serverInfoPanel);
        serverInfoPanel.setLayout(serverInfoPanelLayout);
        serverInfoPanelLayout.setHorizontalGroup(
            serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverInfoPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverInfoPanelLayout.createSequentialGroup()
                        .addComponent(txtServerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(189, 189, 189))
                    .addGroup(serverInfoPanelLayout.createSequentialGroup()
                        .addComponent(txtBrokerName, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(29, 29, 29)
                        .addComponent(toggleConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblConnected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        serverInfoPanelLayout.setVerticalGroup(
            serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverInfoPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serverInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBrokerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblConnected)
                    .addComponent(toggleConnect)))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                    .addComponent(serverInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(actionTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        getJmxService().close();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JmxMover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JmxMover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JmxMover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JmxMover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        jmxMover = new JmxMover();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        getJmxMover().setLocation((dim.width - getJmxMover().getWidth()) / 2,
                (dim.height - getJmxMover().getHeight()) / 2);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                getJmxMover().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTabbedPane actionTabbedPane;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblConnected;
    private javax.swing.JMenuBar menuBar;
    private com.dhenton9000.jmx.mover.gui.MessagePropertiesPanel messagePropertiesPanel;
    private com.dhenton9000.jmx.mover.gui.MoverPanel moverPanel;
    private com.dhenton9000.jmx.mover.gui.QueuePropertiesPanel queuePropertiesPanel;
    private javax.swing.JPanel serverInfoPanel;
    private javax.swing.JToggleButton toggleConnect;
    private javax.swing.JTextField txtBrokerName;
    private javax.swing.JTextField txtServerName;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables

    /**
     * move messages from and to queues
     *
     * @param selectedFromQueue
     * @param selectedToQueue
     */
    void moveMessages(String selectedFromQueue, String selectedToQueue) {
        String error = getJmxService().moveMessages(selectedFromQueue, selectedToQueue);
        if (error != null) {
            JOptionPane.showMessageDialog(this,
                    error,
                    "Move Messages Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Message Moving Inititated!",
                    "Move Messages",
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }

    /**
     * @return the jmxService
     */
    public JmxBrokerService getJmxService() {
        return jmxService;
    }

    /**
     * handle the case where the panels announces that one of the lists has
     * changed
     *
     * @param selectedQueue the selected value on the list
     * @return the current count of items on that queue or null if there is a
     * problem
     */
    Long getQueueCount(String selectedQueue) {
        Long queueCount = null;
        if (selectedQueue != null) {
            long t = getJmxService().getQueueCount(selectedQueue);
            queueCount = new Long(t);
        }
        return queueCount;
    }

    HashMap<String, String> getQueueProperties(String selectedValue) {
        return getJmxService().getQueueProperties(selectedValue);
    }

    List<String> getQueueMessageIds(String qName) {
        return getJmxService().getQueueMessageIds(qName);
    }

    public HashMap<String, String> getMessageProperties(String qName, String messageId) {
        return getJmxService().getMessageProperties(qName, messageId);
    }

    private boolean performConnect() {
        String errorMessage = null;
        String serverName = txtServerName.getText();
        String brokerName = txtBrokerName.getText();
        String serverPort = txtServerPort.getText();
        jmxService = new JmxBrokerServiceImpl();
        boolean success = false;
        Integer port = null;
        try {
            port = Integer.parseInt(serverPort);
        } catch (Exception err) {
            errorMessage = "Cannot obtain port value for '" + serverPort + "'";


        }
        if (errorMessage == null) {
            errorMessage = getJmxService().set(brokerName, serverName, port.intValue());
        }
        if (!jmxService.isSetSuccessful()) {
            this.lblConnected.setText("");
            JOptionPane.showMessageDialog(this,
                    errorMessage,
                    "Connecti  logeon Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            // this.lblConnected.setText("Connected!");
            final List<String> items = getJmxService().getQueueList();
            success = true;

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    moverPanel.loadMoverLists(items);
                    queuePropertiesPanel.loadMoverLists(items);
                    messagePropertiesPanel.loadMoverLists(items);
                }
            });

        }
        return success;
    }

    private void performDisconnect() {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                txtServerName.setText("");
                txtBrokerName.setText("");
                txtServerPort.setText("");
                moverPanel.clear();
                queuePropertiesPanel.clear();
                messagePropertiesPanel.clear();
            }
        });


    }

    private void handleConnectionToggleButton(JToggleButton jButton) {
        logger.debug("toggle is now " + jButton.isSelected());
        if (jButton.isSelected()) {
            // you are connecting
            boolean success = performConnect();
            if (success) {
                jButton.setText("DISCONNECT");
            } else {
                jButton.setSelected(false);
            }
        } else {
            //you are disconnecting
            performDisconnect();
            jButton.setText("CONNECT");
        }
    }

    HashMap<String, String> getUserProperties(String selectedQueue, String selectedMessageId) {
        return getJmxService().getUserProperties(selectedQueue, selectedMessageId);
    }

    String getMessageText(String selectedQueue, String selectedMessageId) {
        return getJmxService().getMessageText(selectedQueue, selectedMessageId);
    }
}
